#version 430 core

// tell PG to emit triangles in counter-clockwise order with equal spacing
layout(triangles, equal_spacing, ccw) in;

layout(binding = 1) uniform sampler2D dispTexture; // texture for displacement values
//uniform mat4 P;
uniform mat4 MVP;
uniform mat4 M;

uniform float displacement_factor;

// these vertex attributes are passed down from the TCS
in vec3 in_Position_ES[];
in vec2 in_TextCoord_ES[];
in vec3 in_Normal_ES[];


out vec2 in_TextCoord_FS;

out vec3 WorldPos_FS_in;
out vec2 TexCoord_FS_in;
out vec3 Normal_FS_in;

// Interpolate values v0-v2 based on the barycentric coordinates
// of the current vertex within the triangle
vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) {
     return vec2(gl_TessCoord.x) * v0 +
     vec2(gl_TessCoord.y) * v1 +
     vec2(gl_TessCoord.z) * v2;
}

// Interpolate values v0-v2 based on the barycentric coordinates
// of the current vertex within the triangle
vec3 interpolate3D(vec3 v0, vec3 v1, vec3 v2) {
     return vec3(gl_TessCoord.x) * v0 +
     vec3(gl_TessCoord.y) * v1 +
     vec3(gl_TessCoord.z) * v2;
}

void main(void) {
     // Interpolate attribs of output vertex using its barycentric coords
     vec4 position = vec4( interpolate3D( in_Position_ES[0].xyz,
     in_Position_ES[1].xyz, in_Position_ES[2].xyz ), 1.0);
     vec4 normal = normalize(vec4( interpolate3D( in_Normal_ES[0],
                   in_Normal_ES[1], in_Normal_ES[2]), 0.0));

     vec2 textCoord = interpolate2D(in_TextCoord_ES[0], in_TextCoord_ES[1],
                   in_TextCoord_ES[2]);

// Displace the vertex along the normal
float displacement = texture(dispTexture, textCoord).x;
position += normal * displacement * displacement_factor;

// transform to NDC
gl_Position = MVP * position;
WorldPos_FS_in = position.xyz;
TexCoord_FS_in = textCoord; // pass texture coordinate to FS
Normal_FS_in = normal.xyz;

}
